
plugins {
    id "org.sonarqube" version "2.6.1"
    id "io.codearte.nexus-staging" version "0.11.0"
    id "com.github.spotbugs" version "2.0.0"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.5.6.0.1"
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'org.xbib.gradle.plugin.asciidoctor'

    repositories {
        mavenCentral()
    }

    configurations {
        asciidoclet
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${project.property('junit.version')}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${project.property('junit.version')}"
        testImplementation "org.hamcrest:hamcrest-library:${project.property('hamcrest.version')}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project.property('junit.version')}"
        testImplementation "com.fasterxml.jackson.core:jackson-databind:${project.property('jackson.version')}"
        asciidoclet "org.asciidoctor:asciidoclet:${project.property('asciidoclet.version')}"
    }

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    
    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all"
    }

    jar {
        manifest {
            attributes('Implementation-Version': project.version)
        }
    }

    clean {
        delete 'out'
    }

    test {
        useJUnitPlatform()
        systemProperty 'java.net.preferIPv4Stack', 'false'
        systemProperty 'java.net.preferIPv6Addresses', 'true'
        failFast = false
        testLogging {
            events 'STARTED', 'PASSED', 'FAILED', 'SKIPPED'
        }
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"
            }
        }
    }

    asciidoctor {
        attributes 'source-highlighter': 'coderay',
                toc: 'left',
                doctype: 'book',
                icons: 'font',
                encoding: 'utf-8',
                sectlink: true,
                sectanchors: true,
                linkattrs: true,
                imagesdir: 'img'
    }

    /*javadoc {
        options.docletpath = configurations.asciidoclet.files.asType(List)
        options.doclet = 'org.asciidoctor.Asciidoclet'
        //options.overview = "src/docs/asciidoclet/overview.adoc"
        options.addStringOption "-base-dir", "${projectDir}"
        options.addStringOption "-attribute",
                "name=${project.name},version=${project.version},title-link=https://github.com/xbib/${project.name}"
        configure(options) {
            noTimestamp = true
        }
    }*/

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    apply from: "${rootProject.projectDir}/gradle/publish.gradle"

    tasks.withType(Checkstyle) {
        ignoreFailures = true
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    tasks.withType(Pmd) {
        ignoreFailures = true
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    checkstyle {
        //configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        ignoreFailures = true
        showViolations = true
    }

    sonarqube {
        properties {
            property "sonar.projectName", "${project.group} ${project.name}"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.tests", "src/test/java"
            property "sonar.scm.provider", "git"
            property "sonar.junit.reportsPath", "build/test-results/test/"
        }
    }

    spotbugs {
        effort = "max"
        reportLevel = "low"
        //includeFilter = file("findbugs-exclude.xml")
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        ignoreFailures = true
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

nexusStaging {
    packageGroup = "org.xbib"
}
